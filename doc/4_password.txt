Encryption
1. Store encrypted version of password
2. Adding a password_digest method to User model. Name password_digest is convention.
3. Add bcrypt ruby gem for encryption - 
gem 'rails', '3.2.10'
gem 'bootstrap-sass', '2.1'
gem 'bcrypt-ruby', '3.0.1'
4. bundle install
5. Add test
  it { should respond_to(:name) }
  it { should respond_to(:email) }
  it { should respond_to(:password_digest) }
6. Generate migration - rails generate migration add_password_digest_to_users password_digest:string
7. Look at migration file
8. rake db:migrate
9. rake db:test:prepare

Password Confirmation
1. Test cases
  it { should respond_to(:password) }
  it { should respond_to(:password_confirmation) }
2. Change before

3. Test case  
  describe "when password is not present" do
    before { @user.password = @user.password_confirmation = " " }
    it { should_not be_valid }
  end
  
  describe "when password doesn't match confirmation" do
    before { @user.password_confirmation = "mismatch" }
    it { should_not be_valid }
  end
  
  describe "when password confirmation is nil" do
    before { @user.password_confirmation = nil }
    it { should_not be_valid }
  end

Authentication
1. We will need similar to following in future - 
user = User.find_by_email(email)
current_user = user.authenticate(password)
2. Test case
it { should respond_to(:authenticate) }

describe "return value of authenticate method" do
  before { @user.save }
  let(:found_user) { User.find_by_email(@user.email) }

  describe "with valid password" do
    it { should == found_user.authenticate(@user.password) }
  end

  describe "with invalid password" do
    let(:user_for_invalid_password) { found_user.authenticate("invalid") }

    it { should_not == user_for_invalid_password }
  end
end

#Security precaution
describe "with a password that's too short" do
  before { @user.password = @user.password_confirmation = "a" * 5 }
  it { should be_invalid }
end

Passing Test
1. User Model -> :name, :email, :password, :password_confirmation
2. User Model -> validates :password, presence: true, length: { minimum: 6 }
3. User Model -> validates :password_confirmation, presence: true

CONVENTION
class User < ActiveRecord::Base
  attr_accessible :name, :email, :password, :password_confirmation
  has_secure_password
  
  before_save { |user| user.email = email.downcase }
  
  validates :name,  presence: true, length: { maximum: 50 }
  VALID_EMAIL_REGEX = /\A[\w+\-.]+@[a-z\d\-.]+\.[a-z]+\z/i
  validates :email, presence: true, format: { with: VALID_EMAIL_REGEX }, uniqueness: { case_sensitive: false }
  validates :password, presence: true, length: { minimum: 6 }
  validates :password_confirmation, presence: true
end

RAILS CONSOLE
1. rails console
2. User.create(name: "Rajan Punchouty", email: "rajan@ezzie.in", password: "mypassword", password_confirmation: "mypassword")
3. user = User.find_by_email("rajan@ezzie.in")
4. user.password_digest
5. user.authenticate("invalid")
6. 

GIT
1. git add .
2. git commit -m "Make a basic User model (including secure passwords)"
3. git checkout master
4. git merge modeling-users
5. git push